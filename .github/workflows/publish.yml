name: Build and Push to PyPI, Conda and Docker

on:
  release:
    types: [published]

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine flake8
    - name: Lint with flake8
      run: |
        flake8 . --count --exit-zero --max-line-length=120 --statistics
    - name: Build and publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        python setup.py sdist bdist_wheel
        echo $(twine upload dist/*)
        export VERSION=$(grep -o "[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9a-z]\+" src/r2g/__init__.py)
        echo "::set-env name=VERSION::$VERSION"
        export SHA=$(sha256sum r2g-tmp.tar.gz |cut -f 1 -d " ")
        echo "::set-env name=SHA::$SHA"
    - name: Trigger dryrun using Homebrew on macOS
      if: success()
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.REPO_GHA_PAT }}
        repository: ${{ github.repository }}
        event-type: trigger-dryrun-homebrew
        client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'

    - name: Build and publish to custom Conda channel
      env:
        ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
        PKG: r2g
        VERSION: ${{ env.VERSION }}
        SHA: ${{ env.SHA }}
      run: |
        sed -i "s/version = \"[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9a-z]\+\"/version =\"${VERSION}\"/" conda-recipes/meta.yaml
        sed -i "s/sha256: .\+/sha256: $SHA/" conda-recipes/meta.yaml
        wget -qO miniconda3.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
        bash miniconda3.sh -bfp /opt/miniconda3
        /opt/miniconda3/bin/conda config --add channels defaults
        /opt/miniconda3/bin/conda config --add channels bioconda
        /opt/miniconda3/bin/conda config --add channels conda-forge
        /opt/miniconda3/bin/conda update -y --all
        /opt/miniconda3/bin/conda install anaconda-client conda-build conda-verify
        /opt/miniconda3/bin/conda build -c conda-forge -c bioconda --output-folder conda-recipes conda-recipes
        /opt/miniconda3/bin/anaconda upload -p ${PKG} -u yangwu91 --label main -v $VERSION $(ls conda-recipes/noarch/${PKG}-*.tar.bz2)
#        /opt/miniconda3/bin/anaconda logout
    - name: Trigger dryrun using Conda on Linux
      if: success()
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.REPO_GHA_PAT }}
        repository: ${{ github.repository }}
        event-type: trigger-dryrun-conda
        client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'

    - name: Docker build and push
      env:
        VERSION: ${{ env.VERSION }}
        NAME: r2g
        PASSWORD: ${{ secrets.DOCKER_TOKEN }}
      run : |
        cd docker
        make docker
        docker --version
        docker build -f Dockerfile -t yangwu91/${NAME}:${VERSION} -t yangwu91/${NAME}:latest .
        docker login --username yangwu91 --password $PASSWORD
        docker push yangwu91/${NAME}:latest
        docker push yangwu91/${NAME}:${VERSION}
        docker logout
#    - name: Trigger dryrun using Docker on Windows
#      if: success()
#      uses: peter-evans/repository-dispatch@v1
#      with:
#        token: ${{ secrets.REPO_GHA_PAT }}
#        repository: ${{ github.repository }}
#        event-type: trigger-dryrun-docker
#        client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'
